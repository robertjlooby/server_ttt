// Generated by CoffeeScript 1.6.2
(function() {
  describe("CSSDisplay.resetBoard", function() {
    beforeEach(function() {
      var board;
      board = affix("#board");
      return board.affix("#newGameForm").html("a form");
    });
    it("should reset the contents of #board", function() {
      CSSDisplay.resetBoard("X");
      expect($("div#board").html()).toMatch("class=\"button\">0<");
      expect($("div#board").html()).toMatch("<div id=\"row2\">");
      return expect($("div#board").html()).toMatch("<div id=\"cell8\">");
    });
    it("should remove form", function() {
      expect($("#newGameForm").html()).toBe("a form");
      CSSDisplay.resetBoard("X");
      return expect($("#newGameForm").size()).toBe(0);
    });
    return it("should attach the given event handler to each button", function() {
      var cell, fn, _i, _j, _results;
      fn = jasmine.createSpy("fn");
      CSSDisplay.resetBoard(fn);
      for (cell = _i = 0; _i <= 8; cell = ++_i) {
        $("#cell" + cell).click();
      }
      expect(fn.calls.length).toBe(9);
      _results = [];
      for (cell = _j = 0; _j <= 8; cell = ++_j) {
        _results.push(expect(fn).toHaveBeenCalledWith(cell));
      }
      return _results;
    });
  });

  describe("CSSDisplay.getCell", function() {
    beforeEach(function() {
      var board;
      board = affix("#board");
      board.affix("#cell0").html("0");
      board.affix("#cell1").html("1");
      return board.affix("#cell2").html("2");
    });
    it("should get the given cell by number", function() {
      expect(CSSDisplay.getCell(0).html()).toBe("0");
      return expect(CSSDisplay.getCell(2).html()).toBe("2");
    });
    return it("should return an empty element set for a nonexistent cell", function() {
      expect(CSSDisplay.getCell(-1).size()).toBe(0);
      return expect(CSSDisplay.getCell(9).size()).toBe(0);
    });
  });

  describe("CSSDisplay.getButton", function() {
    beforeEach(function() {
      var board;
      board = affix("#board");
      board.affix("#cell0").affix(".button").html("0");
      board.affix("#cell1").affix(".button").html("1");
      return board.affix("#cell2").affix(".button").html("2");
    });
    it("should get the given cell by number", function() {
      expect(CSSDisplay.getButton(0).html()).toBe("0");
      return expect(CSSDisplay.getButton(2).html()).toBe("2");
    });
    return it("should return an empty element set for a nonexistent cell", function() {
      expect(CSSDisplay.getButton(-1).size()).toBe(0);
      return expect(CSSDisplay.getButton(9).size()).toBe(0);
    });
  });

  describe("CSSDisplay.makeMove", function() {
    beforeEach(function() {
      var board;
      board = affix("#board");
      board.affix("#cell0").html("empty cell");
      return board.affix("#cell5").html("empty cell");
    });
    return it("should replace cell contents with marker", function() {
      CSSDisplay.makeMove("X", 0);
      CSSDisplay.makeMove("O", 5);
      expect($("#cell0").html()).toBe("X");
      return expect($("#cell5").html()).toBe("O");
    });
  });

  describe("CSSDisplay.getMarker", function() {
    var o, x;
    x = o = null;
    beforeEach(function() {
      var form;
      form = affix("#newGameForm");
      x = form.affix('input[name="marker"][type="radio"][value="X"]');
      return o = form.affix('input[name="marker"][type="radio"][value="O"]');
    });
    return it("should return the marker value from the form", function() {
      x.prop("checked", true);
      expect(CSSDisplay.getMarker()).toBe("X");
      o.prop("checked", true);
      return expect(CSSDisplay.getMarker()).toBe("O");
    });
  });

  describe("CSSDisplay.getMove", function() {
    var m0, m1;
    m0 = m1 = null;
    beforeEach(function() {
      var form;
      form = affix("#newGameForm");
      m0 = form.affix('input[name="move"][type="radio"][value="0"]');
      return m1 = form.affix('input[name="move"][type="radio"][value="1"]');
    });
    return it("should return the move value from the form", function() {
      m0.prop("checked", true);
      expect(CSSDisplay.getMove()).toBe("0");
      m1.prop("checked", true);
      return expect(CSSDisplay.getMove()).toBe("1");
    });
  });

  describe("CSSDisplay end of game messages", function() {
    beforeEach(function() {
      return affix("#board");
    });
    it("should display a win message", function() {
      CSSDisplay.displayWinMessage();
      return expect($("#board h1").html()).toMatch("Win");
    });
    it("should display a lose message", function() {
      CSSDisplay.displayLoseMessage();
      return expect($("#board h1").html()).toMatch("Lose");
    });
    return it("should display a tie message", function() {
      CSSDisplay.displayTieMessage();
      return expect($("#board h1").html()).toMatch("Tie");
    });
  });

  describe("CSSDisplay.displayForm", function() {
    beforeEach(function() {
      return affix("#board");
    });
    it("should display the newGameForm with button", function() {
      CSSDisplay.displayForm(function() {
        return "fn called";
      });
      return expect($("#board #newGameForm #newGameButton").size()).toBe(1);
    });
    return it("should attach the given fn to the newGameButton element", function() {
      var fn;
      fn = jasmine.createSpy("fn");
      CSSDisplay.displayForm(fn);
      expect(fn).not.toHaveBeenCalled();
      $("#newGameButton").click();
      return expect(fn).toHaveBeenCalled();
    });
  });

}).call(this);
