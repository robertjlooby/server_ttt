// Generated by CoffeeScript 1.6.2
(function() {
  describe("resetBoard", function() {
    beforeEach(function() {
      return affix("#board");
    });
    it("should reset the contents of #board", function() {
      TicTacToe.resetBoard("X");
      return expect($("div#board").html()).toMatch("TicTacToe\.makeMove\\('X', '_________', 4\\)");
    });
    return it("should reset the contents of #board with the given marker", function() {
      TicTacToe.resetBoard("O");
      return expect($("div#board").html()).toMatch("TicTacToe\.makeMove\\('O', '_________', 8\\)");
    });
  });

  describe("button visibility", function() {
    beforeEach(function() {
      affix("#board");
      return TicTacToe.resetBoard("X");
    });
    it("should hide all .button 's", function() {
      TicTacToe.hideButtons();
      return $(".button").each(function() {
        return expect($(this).css("display")).toBe("none");
      });
    });
    return it("should show all .button 's", function() {
      TicTacToe.hideButtons();
      TicTacToe.showButtons();
      return $(".button").each(function() {
        return expect($(this).css("display")).toBe("inline-block");
      });
    });
  });

  describe("getNewBoardState", function() {
    return it("should replace first element", function() {
      return expect(TicTacToe.getNewBoardState("X", "__O______", 0)).toBe("X_O______");
    });
  });

  describe("getNewBoardState", function() {
    it("should replace first element", function() {
      return expect(TicTacToe.getNewBoardState("X", "__O______", 0)).toBe("X_O______");
    });
    it("should replace an element in the middle", function() {
      return expect(TicTacToe.getNewBoardState("O", "X_OX_____", 6)).toBe("X_OX__O__");
    });
    return it("should replace an element at the end", function() {
      return expect(TicTacToe.getNewBoardState("X", "X_OX__O__", 8)).toBe("X_OX__O_X");
    });
  });

  describe("setUpBoard", function() {
    beforeEach(function() {
      affix("form");
      return affix("#board");
    });
    it("should hide the form", function() {
      TicTacToe.setUpBoard("X");
      return expect($("form").css("display")).toBe("none");
    });
    it("should reset the board", function() {
      TicTacToe.setUpBoard("X");
      return expect($(".button").size()).toBe(9);
    });
    return it("should hide all .button 's", function() {
      TicTacToe.setUpBoard("X");
      return $(".button").each(function() {
        return expect($(this).css("display")).toBe("none");
      });
    });
  });

  describe("updateBoardHuman", function() {
    beforeEach(function() {
      affix("#board");
      return TicTacToe.resetBoard("X");
    });
    it("should make the human move in a given cell", function() {
      TicTacToe.updateBoardHuman("X", "_________", 0);
      return expect($("#cell0").html()).toBe("X");
    });
    it("should hide all the buttons", function() {
      TicTacToe.updateBoardHuman("X", "_________", 0);
      return $(".button").each(function() {
        return expect($(this).css("display")).toMatch("none");
      });
    });
    return it("should update the boardState in all the buttons", function() {
      TicTacToe.updateBoardHuman("X", "X________", 0);
      return $(".button").each(function() {
        return expect($(this).attr("onclick")).toMatch("X________");
      });
    });
  });

  describe("updateBoardAI", function() {
    beforeEach(function() {
      affix("form");
      $("form").hide();
      affix("#board");
      TicTacToe.resetBoard("X");
      return TicTacToe.hideButtons();
    });
    it("should make the aiMove in the given cell", function() {
      TicTacToe.updateBoardAI("O", "X___O____", 4, null);
      return expect($("#cell4").html()).toBe("O");
    });
    it("should update the boardState in all the buttons", function() {
      TicTacToe.updateBoardAI("O", "X___O____", 4, null);
      return $(".button").each(function() {
        return expect($(this).attr("onclick")).toMatch("X___O____");
      });
    });
    it("should make all buttons visible again", function() {
      TicTacToe.updateBoardAI("O", "X___O____", 4, null);
      return $(".button").each(function() {
        return expect($(this).css("display")).toMatch("inline-block");
      });
    });
    it("should display win message and form when player wins, not buttons", function() {
      TicTacToe.updateBoardAI("O", "X_OOX_XOX", 7, "W");
      expect($("h1").html()).toMatch("Win");
      expect($("form").css("display")).toBe("block");
      return $(".button").each(function() {
        return expect($(this).css("display")).toMatch("none");
      });
    });
    it("should display lose message and form when player loses, not buttons", function() {
      TicTacToe.updateBoardAI("X", "X_OOX_XOX", 8, "L");
      expect($("h1").html()).toMatch("Lose");
      expect($("form").css("display")).toBe("block");
      return $(".button").each(function() {
        return expect($(this).css("display")).toMatch("none");
      });
    });
    return it("should display tie message and form when player ties, not buttons", function() {
      TicTacToe.updateBoardAI("X", "XOXOOXXXO", 5, "T");
      expect($("h1").html()).toMatch("Tie");
      expect($("form").css("display")).toBe("block");
      return $(".button").each(function() {
        return expect($(this).css("display")).toMatch("none");
      });
    });
  });

  describe("makeMove", function() {
    xit("should call ajax", function() {
      spyOn($, "ajax");
      return expect($.ajax).toHaveBeenCalled;
    });
    xit("should call ajax with the board state and marker", function() {
      spyOn($, "ajax");
      TicTacToe.makeMove("X", "_________");
      expect($.ajax.mostRecentCall.args[0].data.marker).toBe("X");
      return expect($.ajax.mostRecentCall.args[0].data.board_state).toBe("_________");
    });
    xit("should send an asynchronous POST request to /game", function() {
      spyOn($, "ajax");
      TicTacToe.makeMove("X", "_________");
      expect($.ajax.mostRecentCall.args[0].async).toBe(true);
      expect($.ajax.mostRecentCall.args[0].type).toBe("POST");
      return expect($.ajax.mostRecentCall.args[0].url).toBe("/game");
    });
    return xit("should call replace board on success with response", function() {
      spyOn(TicTacToe, "replaceBoard");
      spyOn($, "ajax").andCallFake(function(params) {
        return params.success("hey");
      });
      TicTacToe.makeMove("X", "_________");
      return expect(TicTacToe.replaceBoard.mostRecentCall.args[0]).toBe("hey");
    });
  });

  describe("initializeGame", function() {
    beforeEach(function() {
      var form;
      form = affix("form");
      form.affix('input[name="marker"][value="X"]:checked');
      form.affix('input[name="move"][value="0"]:checked');
      return affix("#board");
    });
    it("should send an asynchronous POST request to / and initialize game", function() {
      var flag;
      spyOn($, "ajax").andCallFake(function(params) {
        return params.success("O", "_________", -1, null);
      });
      flag = false;
      runs(function() {
        return setTimeout((function() {
          TicTacToe.initializeGame;
          return flag = true;
        }), 0);
      });
      waitsFor((function() {
        return flag;
      }), "Should call initialize game.", 1000);
      return runs(function() {
        expect($.ajax).toHaveBeenCalled();
        expect($.ajax.mostRecentCall.args[0].async).toBe(true);
        expect($.ajax.mostRecentCall.args[0].dataType).toBe("json");
        expect($.ajax.mostRecentCall.args[0].type).toBe("POST");
        expect($.ajax.mostRecentCall.args[0].url).toBe("/");
        expect($("form").css("display")).toBe("none");
        $(".button").each(function() {
          return expect($(this).css("display")).toMatch("inline-block");
        });
        return expect($("#board").html()).toMatch("TicTacToe\.makeMove\\('X', '_________', 4\\)");
      });
    });
    return xit("should call replace board on success with response", function() {
      spyOn(TicTacToe, "replaceBoard");
      spyOn($, "ajax").andCallFake(function(params) {
        return params.success("hey");
      });
      TicTacToe.initializeGame("X", "0");
      return expect(TicTacToe.replaceBoard.mostRecentCall.args[0]).toBe("hey");
    });
  });

}).call(this);
