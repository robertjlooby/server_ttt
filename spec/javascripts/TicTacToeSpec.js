// Generated by CoffeeScript 1.6.2
(function() {
  describe("TicTacToe.resetBoard", function() {
    beforeEach(function() {
      affix("#board");
      return spyOn(TicTacToe.display, "resetBoard");
    });
    it("should reset TicTacToe.boardState to an empty board", function() {
      TicTacToe.boardState = "blahblah";
      TicTacToe.resetBoard("X");
      return expect(TicTacToe.boardState).toBe("_________");
    });
    it("should reset TicTacToe.buttonsEnabled to false", function() {
      TicTacToe.buttonsEnabled = true;
      TicTacToe.resetBoard("X");
      return expect(TicTacToe.buttonsEnabled).toBe(false);
    });
    return it("should pass event handler to display.resetBoard which calls makeMove", function() {
      var eventFn;
      spyOn(TicTacToe, "makeMove");
      TicTacToe.resetBoard("X");
      eventFn = TicTacToe.display.resetBoard.calls[0].args[0];
      expect(eventFn(0)).toBe(void 0);
      TicTacToe.buttonsEnabled = true;
      eventFn(0);
      return expect(TicTacToe.makeMove).toHaveBeenCalledWith("X", "_________", 0);
    });
  });

  describe("TicTacToe.displayForm", function() {
    return it("passes an event handler to call initializeGame to  display.displayForm()", function() {
      spyOn(TicTacToe, "initializeGame");
      spyOn(TicTacToe.display, "displayForm");
      TicTacToe.displayForm();
      expect(TicTacToe.initializeGame).not.toHaveBeenCalled();
      TicTacToe.display.displayForm.calls[0].args[0]();
      return expect(TicTacToe.initializeGame).toHaveBeenCalled();
    });
  });

  describe("TicTacToe.disable/enable Buttons", function() {
    var eventFn;
    eventFn = null;
    beforeEach(function() {
      spyOn(TicTacToe, "makeMove");
      spyOn(TicTacToe.display, "resetBoard");
      TicTacToe.resetBoard("X");
      return eventFn = TicTacToe.display.resetBoard.calls[0].args[0];
    });
    it("buttons should do nothing by default", function() {
      eventFn(0);
      return expect(TicTacToe.makeMove).not.toHaveBeenCalled();
    });
    it("should enable all buttons", function() {
      TicTacToe.enableButtons();
      eventFn(0);
      return expect(TicTacToe.makeMove).toHaveBeenCalledWith("X", "_________", 0);
    });
    return it("should be able to disable buttons again", function() {
      TicTacToe.enableButtons();
      TicTacToe.disableButtons();
      eventFn(0);
      return expect(TicTacToe.makeMove).not.toHaveBeenCalled();
    });
  });

  describe("TicTacToe.getNewBoardState", function() {
    return it("should replace first element", function() {
      return expect(TicTacToe.getNewBoardState("X", "__O______", 0)).toBe("X_O______");
    });
  });

  describe("TicTacToe.getNewBoardState", function() {
    it("should replace first element", function() {
      return expect(TicTacToe.getNewBoardState("X", "__O______", 0)).toBe("X_O______");
    });
    it("should replace an element in the middle", function() {
      return expect(TicTacToe.getNewBoardState("O", "X_OX_____", 6)).toBe("X_OX__O__");
    });
    return it("should replace an element at the end", function() {
      return expect(TicTacToe.getNewBoardState("X", "X_OX__O__", 8)).toBe("X_OX__O_X");
    });
  });

  describe("TicTacToe.setUpBoard", function() {
    beforeEach(function() {
      return affix("#board").affix("#newGameForm");
    });
    it("should remove the form", function() {
      TicTacToe.setUpBoard("X");
      return expect($("#newGameForm").size()).toBe(0);
    });
    return it("should reset the board", function() {
      TicTacToe.setUpBoard("X");
      expect($(".button").size()).toBe(9);
      return expect(TicTacToe.boardState).toBe("_________");
    });
  });

  describe("TicTacToe.updateBoardHuman", function() {
    beforeEach(function() {
      var board;
      board = affix("#board");
      return board.affix("#cell0");
    });
    it("should make the human move in a given cell", function() {
      spyOn(TicTacToe.display, "makeMove").andCallFake(function(marker, cellNum) {
        return $("#cell" + cellNum).html(marker);
      });
      TicTacToe.updateBoardHuman("X", "_________", 0);
      return expect($("#cell0").html()).toBe("X");
    });
    it("should disable buttons", function() {
      TicTacToe.updateBoardHuman("X", "_________", 0);
      return expect(TicTacToe.buttonsEnabled).toBe(false);
    });
    return it("should update the boardState", function() {
      TicTacToe.updateBoardHuman("X", "X________", 0);
      return expect(TicTacToe.boardState).toBe("X________");
    });
  });

  describe("TicTacToe.updateBoardAI", function() {
    beforeEach(function() {
      var board;
      board = affix("#board");
      board.affix("#cell4");
      return TicTacToe.buttonsEnabled = false;
    });
    it("should make the aiMove in the given cell", function() {
      spyOn(TicTacToe.display, "makeMove").andCallFake(function(marker, cellNum) {
        return $("#cell" + cellNum).html(marker);
      });
      TicTacToe.updateBoardAI("O", "X___O____", 4, null);
      return expect($("#cell4").html()).toBe("O");
    });
    it("should update the boardState", function() {
      TicTacToe.updateBoardAI("O", "X___O____", 4, null);
      return expect(TicTacToe.boardState).toBe("X___O____");
    });
    it("should enable buttons again", function() {
      TicTacToe.updateBoardAI("O", "X___O____", 4, null);
      return expect(TicTacToe.buttonsEnabled).toBe(true);
    });
    it("should display win message and form when player wins, buttons should be disabled", function() {
      TicTacToe.updateBoardAI("O", "X_OOX_XOX", 7, "W");
      expect($("h1").html()).toMatch("Win");
      expect($("#board #newGameForm").size()).toBe(1);
      return expect(TicTacToe.buttonsEnabled).toBe(false);
    });
    it("should display lose message and form when player loses, buttons should be disabled", function() {
      TicTacToe.updateBoardAI("X", "X_OOX_XOX", 8, "L");
      expect($("h1").html()).toMatch("Lose");
      expect($("#board #newGameForm").size()).toBe(1);
      return expect(TicTacToe.buttonsEnabled).toBe(false);
    });
    return it("should display tie message and form when player ties, buttons should be disabled", function() {
      TicTacToe.updateBoardAI("X", "XOXOOXXXO", 5, "T");
      expect($("h1").html()).toMatch("Tie");
      expect($("#board #newGameForm").size()).toBe(1);
      return expect(TicTacToe.buttonsEnabled).toBe(false);
    });
  });

  describe("TicTacToe.makeMove", function() {
    beforeEach(function() {
      affix("#board");
      TicTacToe.resetBoard("X");
      return TicTacToe.enableButtons();
    });
    it("should send an asynchronous POST request to /game", function() {
      var flag;
      flag = false;
      spyOn($, "ajax").andCallFake(function(params) {
        return setTimeout((function() {
          params.success({
            "boardState": "X___O____",
            "aiMove": 4,
            "result": null
          });
          return flag = true;
        }), 0);
      });
      waitsFor((function() {
        return flag;
      }), "Should call makeMove.", 1000);
      runs(function() {
        expect($.ajax).toHaveBeenCalled();
        expect($.ajax.mostRecentCall.args[0].async).toBe(true);
        expect($.ajax.mostRecentCall.args[0].dataType).toBe("json");
        expect($.ajax.mostRecentCall.args[0].type).toBe("POST");
        expect($.ajax.mostRecentCall.args[0].url).toBe("/game");
        expect($("#board #newGameForm").size()).toBe(0);
        expect($("#cell0").html()).toBe("X");
        expect($("#cell4").html()).toBe("O");
        expect(TicTacToe.boardState).toBe("X___O____");
        return expect(TicTacToe.buttonsEnabled).toBe(true);
      });
      return TicTacToe.makeMove("X", "_________", 0);
    });
    it("show 'Tie'/form and disabled buttons for tie", function() {
      var flag;
      flag = false;
      spyOn($, "ajax").andCallFake(function(params) {
        return setTimeout((function() {
          params.success({
            "boardState": "XOXXOOOXX",
            "aiMove": -1,
            "result": "T"
          });
          return flag = true;
        }), 0);
      });
      waitsFor((function() {
        return flag;
      }), "Should call makeMove.", 1000);
      runs(function() {
        expect($("h1").html()).toMatch("Tie");
        expect($("#board #newGameForm").size()).toBe(1);
        expect(TicTacToe.boardState).toBe("XOXXOOOXX");
        return expect(TicTacToe.buttonsEnabled).toBe(false);
      });
      return TicTacToe.makeMove("X", "XOXXOOOX_", 0);
    });
    it("show 'Tie'/form and disabled buttons for tie after AI move", function() {
      var flag;
      flag = false;
      spyOn($, "ajax").andCallFake(function(params) {
        return setTimeout((function() {
          params.success({
            "boardState": "OXOOXXXOO",
            "aiMove": 8,
            "result": "T"
          });
          return flag = true;
        }), 0);
      });
      waitsFor((function() {
        return flag;
      }), "Should call makeMove.", 1000);
      runs(function() {
        expect($("h1").html()).toMatch("Tie");
        expect($("#board #newGameForm").size()).toBe(1);
        expect(TicTacToe.boardState).toBe("OXOOXXXOO");
        return expect(TicTacToe.buttonsEnabled).toBe(false);
      });
      return TicTacToe.makeMove("X", "OXOOXX_O_", 6);
    });
    it("show 'Win'/form and disabled buttons for player win", function() {
      var flag;
      flag = false;
      spyOn($, "ajax").andCallFake(function(params) {
        return setTimeout((function() {
          params.success({
            "boardState": "X_OOO_XXX",
            "aiMove": -1,
            "result": "W"
          });
          return flag = true;
        }), 0);
      });
      waitsFor((function() {
        return flag;
      }), "Should call makeMove.", 1000);
      runs(function() {
        expect($("h1").html()).toMatch("Win");
        expect($("#board #newGameForm").size()).toBe(1);
        expect(TicTacToe.boardState).toBe("X_OOO_XXX");
        return expect(TicTacToe.buttonsEnabled).toBe(false);
      });
      return TicTacToe.makeMove("X", "X_OOO_X_X", 7);
    });
    it("show 'Lose'/form and disabled buttons for player loss", function() {
      var flag;
      flag = false;
      spyOn($, "ajax").andCallFake(function(params) {
        return setTimeout((function() {
          params.success({
            "boardState": "OXXOO_O_X",
            "aiMove": 3,
            "result": "L"
          });
          return flag = true;
        }), 0);
      });
      waitsFor((function() {
        return flag;
      }), "Should call makeMove.", 1000);
      runs(function() {
        expect($("h1").html()).toMatch("Lose");
        expect($("#board #newGameForm").size()).toBe(1);
        expect(TicTacToe.boardState).toBe("OXXOO_O_X");
        return expect(TicTacToe.buttonsEnabled).toBe(false);
      });
      return TicTacToe.makeMove("X", "OX__O_O_X", 2);
    });
    return it("should disable buttons while waiting for server, enable buttons when move is returned", function() {
      var flag;
      flag = false;
      spyOn($, "ajax").andCallFake(function(params) {
        return setTimeout((function() {
          params.success({
            "boardState": "X___O____",
            "aiMove": 4,
            "result": null
          });
          return flag = true;
        }), 0);
      });
      waitsFor((function() {
        return flag;
      }), "Should call makeMove.", 1000);
      runs(function() {
        return expect(TicTacToe.buttonsEnabled).toBe(true);
      });
      expect(TicTacToe.buttonsEnabled).toBe(true);
      TicTacToe.makeMove("X", "_________", 0);
      return expect(TicTacToe.buttonsEnabled).toBe(false);
    });
  });

  describe("TicTacToe.initializeGame", function() {
    beforeEach(function() {
      var form;
      form = affix("form");
      form.affix('input[name="marker"][type="radio"][value="X"]').prop("checked", true);
      form.affix('input[name="move"][type="radio"][value="0"]').prop("checked", true);
      return affix("#board");
    });
    it("should send an asynchronous POST request to / and initialize game", function() {
      var flag;
      flag = false;
      spyOn($, "ajax").andCallFake(function(params) {
        return setTimeout((function() {
          params.success({
            "boardState": "_________",
            "aiMove": -1,
            "result": null
          });
          return flag = true;
        }), 0);
      });
      waitsFor((function() {
        return flag;
      }), "Should call initialize game.", 1000);
      runs(function() {
        expect($.ajax).toHaveBeenCalled();
        expect($.ajax.mostRecentCall.args[0].async).toBe(true);
        expect($.ajax.mostRecentCall.args[0].dataType).toBe("json");
        expect($.ajax.mostRecentCall.args[0].type).toBe("POST");
        expect($.ajax.mostRecentCall.args[0].url).toBe("/");
        expect($("#board #newGameForm").size()).toBe(0);
        expect(TicTacToe.boardState).toBe("_________");
        return expect(TicTacToe.buttonsEnabled).toBe(true);
      });
      return TicTacToe.initializeGame();
    });
    return it("should initialize game when moving second", function() {
      var flag;
      flag = false;
      spyOn($, "ajax").andCallFake(function(params) {
        return setTimeout((function() {
          params.success({
            "boardState": "O________",
            "aiMove": 0,
            "result": null
          });
          return flag = true;
        }), 0);
      });
      waitsFor((function() {
        return flag;
      }), "Should call initialize game.", 1000);
      runs(function() {
        expect(TicTacToe.boardState).toBe("O________");
        return expect(TicTacToe.buttonsEnabled).toBe(true);
      });
      return TicTacToe.initializeGame();
    });
  });

}).call(this);
